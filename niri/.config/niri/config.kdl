// This config is in the KDL format: https://kdl.dev
// "/-" comments out the following node.
// Check the wiki for a full description of the configuration:
// https://yalter.github.io/niri/Configuration:-Introduction

// Input device configuration.
// Find the full list of options on the wiki:
// https://yalter.github.io/niri/Configuration:-Input
input {
    keyboard {
        xkb {
            // You can set rules, model, layout, variant and options.
            // For more information, see xkeyboard-config(7).

            // For example:
            // layout "us,ru"
            // options "grp:win_space_toggle,compose:ralt,ctrl:nocaps"

            // If this section is empty, niri will fetch xkb settings
            // from org.freedesktop.locale1. You can control these using
            // localectl set-x11-keymap.
        }

        // Enable numlock on startup, omitting this setting disables it.
        numlock
    }

    // Next sections include libinput settings.
    // Omitting settings disables them, or leaves them at their default values.
    // All commented-out settings here are examples, not defaults.
    touchpad {
        // off
        tap
        // dwt
        // dwtp
        // drag false
        // drag-lock
        natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
        // scroll-method "two-finger"
        // disabled-on-external-mouse
    }

    mouse {
        // off
        // natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
        // scroll-method "no-scroll"
    }

    trackpoint {
        // off
        // natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
        // scroll-method "on-button-down"
        // scroll-button 273
        // scroll-button-lock
        // middle-emulation
    }

    // Uncomment this to make the mouse warp to the center of newly focused windows.
    // the mouse cursor will automatically jump to the center of any window the moment you focus it with your keyboard.
    warp-mouse-to-focus

    // Focus windows and outputs automatically when moving the mouse into them.
    // Setting max-scroll-amount="0%" makes it work only on windows already fully on screen.
    focus-follows-mouse max-scroll-amount="10%"
}

// You can configure outputs by their name, which you can find
// by running `niri msg outputs` while inside a niri instance.
// The built-in laptop monitor is usually called "eDP-1".
// Find more information on the wiki:
// https://yalter.github.io/niri/Configuration:-Outputs
// Remember to uncomment the node by removing "/-"!
/-output "eDP-1" {
    // Uncomment this line to disable this output.
    // off

    // Resolution and, optionally, refresh rate of the output.
    // The format is "<width>x<height>" or "<width>x<height>@<refresh rate>".
    // If the refresh rate is omitted, niri will pick the highest refresh rate
    // for the resolution.
    // If the mode is omitted altogether or is invalid, niri will pick one automatically.
    // Run `niri msg outputs` while inside a niri instance to list all outputs and their modes.
    mode "3840*2160@60Hz"

    // You can use integer or fractional scale, for example use 1.5 for 150% scale.
    scale 2

    // Transform allows to rotate the output counter-clockwise, valid values are:
    // normal, 90, 180, 270, flipped, flipped-90, flipped-180 and flipped-270.
    transform "normal"

    // Position of the output in the global coordinate space.
    // This affects directional monitor actions like "focus-monitor-left", and cursor movement.
    // The cursor can only move between directly adjacent outputs.
    // Output scale and rotation has to be taken into account for positioning:
    // outputs are sized in logical, or scaled, pixels.
    // For example, a 3840×2160 output with scale 2.0 will have a logical size of 1920×1080,
    // so to put another output directly adjacent to it on the right, set its x to 1920.
    // If the position is unset or results in an overlap, the output is instead placed
    // automatically.
    position x=0 y=0
}

switch-events {
    lid-close { spawn "notify-send" "The laptop lid is closed!"; }
    lid-open { spawn "notify-send" "The laptop lid is open!"; }
}
// Settings that influence how windows are positioned and sized.
// Find more information on the wiki:
// https://yalter.github.io/niri/Configuration:-Layout
layout {
    // Set gaps around windows in logical pixels.
    gaps 0

    background-color "transparent"

    // When to center a column when changing focus, options are:
    // - "never", default behavior, focusing an off-screen column will keep at the left
    //   or right edge of the screen.
    // - "always", the focused column will always be centered.
    // - "on-overflow", focusing a column will center it if it doesn't fit
    //   together with the previously focused column.
    center-focused-column "never"

    // You can customize the widths that "switch-preset-column-width" (Mod+R) toggles between.
    preset-column-widths {
        // Proportion sets the width as a fraction of the output width, taking gaps into account.
        // For example, you can perfectly fit four windows sized "proportion 0.25" on an output.
        // The default preset widths are 1/3, 1/2 and 2/3 of the output.
        proportion 0.33333
        proportion 0.5
        proportion 0.66667

        // Fixed sets the width in logical pixels exactly.
        // fixed 1920
    }

    // You can also customize the heights that "switch-preset-window-height" (Mod+Shift+R) toggles between.
    preset-window-heights {
      proportion 0.5
      // fixed 1080
    }

    // You can change the default width of the new windows.
    default-column-width { proportion 0.5; }
    // If you leave the brackets empty, the windows themselves will decide their initial width.
    // default-column-width {}

    // By default focus ring and border are rendered as a solid background rectangle
    // behind windows. That is, they will show up through semitransparent windows.
    // This is because windows using client-side decorations can have an arbitrary shape.
    //
    // If you don't like that, you should uncomment `prefer-no-csd` below.
    // Niri will draw focus ring and border *around* windows that agree to omit their
    // client-side decorations.
    //
    // Alternatively, you can override it with a window rule called
    // `draw-border-with-background`.

    // You can change how the focus ring looks.
    focus-ring {
        // Uncomment this line to disable the focus ring.
        off

        // How many logical pixels the ring extends out from the windows.
        width 2

        // Colors can be set in a variety of ways:
        // - CSS named colors: "red"
        // - RGB hex: "#rgb", "#rgba", "#rrggbb", "#rrggbbaa"
        // - CSS-like notation: "rgb(255, 127, 0)", rgba(), hsl() and a few others.

        // Color of the ring on the active monitor.
        active-color "#7fc8ff"

        // Color of the ring on inactive monitors.
        //
        // The focus ring only draws around the active window, so the only place
        // where you can see its inactive-color is on other monitors.
        inactive-color "#505050"

        // You can also use gradients. They take precedence over solid colors.
        // Gradients are rendered the same as CSS linear-gradient(angle, from, to).
        // The angle is the same as in linear-gradient, and is optional,
        // defaulting to 180 (top-to-bottom gradient).
        // You can use any CSS linear-gradient tool on the web to set these up.
        // Changing the color space is also supported, check the wiki for more info.
        //
        // active-gradient from="#80c8ff" to="#c7ff7f" angle=45

        // You can also color the gradient relative to the entire view
        // of the workspace, rather than relative to just the window itself.
        // To do that, set relative-to="workspace-view".
        //
        // inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
    }

    // You can also add a border. It's similar to the focus ring, but always visible.
    border {
        // The settings are the same as for the focus ring.
        // If you enable the border, you probably want to disable the focus ring.
        off

        width 2
        active-color "#ffc87f"
        inactive-color "#505050"

        // Color of the border around windows that request your attention.
        urgent-color "#9b0000"

        // Gradients can use a few different interpolation color spaces.
        // For example, this is a pastel rainbow gradient via in="oklch longer hue".
        //
        // active-gradient from="#e5989b" to="#ffb4a2" angle=45 relative-to="workspace-view" in="oklch longer hue"

        // inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
    }

    // You can enable drop shadows for windows.
    shadow {
        // Uncomment the next line to enable shadows.
        // on

        // By default, the shadow draws only around its window, and not behind it.
        // Uncomment this setting to make the shadow draw behind its window.
        //
        // Note that niri has no way of knowing about the CSD window corner
        // radius. It has to assume that windows have square corners, leading to
        // shadow artifacts inside the CSD rounded corners. This setting fixes
        // those artifacts.
        //
        // However, instead you may want to set prefer-no-csd and/or
        // geometry-corner-radius. Then, niri will know the corner radius and
        // draw the shadow correctly, without having to draw it behind the
        // window. These will also remove client-side shadows if the window
        // draws any.
        //
        // draw-behind-window true

        // You can change how shadows look. The values below are in logical
        // pixels and match the CSS box-shadow properties.

        // Softness controls the shadow blur radius.
        softness 30

        // Spread expands the shadow.
        spread 5

        // Offset moves the shadow relative to the window.
        offset x=0 y=5

        // You can also change the shadow color and opacity.
        color "#0007"
    }

    // Struts shrink the area occupied by windows, similarly to layer-shell panels.
    // You can think of them as a kind of outer gaps. They are set in logical pixels.
    // Left and right struts will cause the next window to the side to always be visible.
    // Top and bottom struts will simply add outer gaps in addition to the area occupied by
    // layer-shell panels and regular gaps.
    struts {
        // left 32
        // right 32
        // top 32
        // bottom 32
    }
}

// Add lines like this to spawn processes at startup.
// Note that running niri as a session supports xdg-desktop-autostart,
// which may be more convenient to use.
// See the binds section below for more spawn examples.

spawn-at-startup "kanshi"
spawn-sh-at-startup "udiskie &"
spawn-sh-at-startup "fcitx5 -d &"
spawn-sh-at-startup "wl-paste --watch cliphist store"

// To run a shell command (with variables, pipes, etc.), use spawn-sh-at-startup:
// spawn-sh-at-startup "qs -c ~/source/qs/MyAwesomeShell"

hotkey-overlay {
    // Uncomment this line to disable the "Important Hotkeys" pop-up at startup.
    skip-at-startup
}

// Disable the hot corners.
gestures {
    hot-corners {
        off
    }
}
// Uncomment this line to ask the clients to omit their client-side decorations if possible.
// If the client will specifically ask for CSD, the request will be honored.
// Additionally, clients will be informed that they are tiled, removing some client-side rounded corners.
// This option will also fix border/focus ring drawing behind some semitransparent windows.
// After enabling or disabling this, you need to restart the apps for this to take effect.
prefer-no-csd

// You can change the path where screenshots are saved.
// A ~ at the front will be expanded to the home directory.
// The path is formatted with strftime(3) to give you the screenshot date and time.
screenshot-path "~/Pictures/Screenshots/%Y-%m-%d_%H-%M-%S.png"

// You can also set this to null to disable saving screenshots to disk.
// screenshot-path null

// Animation settings.
// The wiki explains how to configure individual animations:
// https://yalter.github.io/niri/Configuration:-Animations
animations {
    // Uncomment to turn off all animations.
    off

    // Slow down all animations by this factor. Values below 1 speed them up instead.
    // slowdown 3.0
}

// Window rules let you adjust behavior for individual windows.
// Find more information on the wiki:
// https://yalter.github.io/niri/Configuration:-Window-Rules

// Work around WezTerm's initial configure bug
// by setting an empty default-column-width.
window-rule {
    // This regular expression is intentionally made as specific as possible,
    // since this is the default config, and we want no false positives.
    // You can get away with just app-id="wezterm" if you want.
    match app-id=r#"^org\.wezfurlong\.wezterm$"#
    default-column-width {}
}

// Open the Chrome picture-in-picture player as floating by default.
window-rule {
    // This app-id regular expression will work for both:
    // - host Firefox (app-id is "firefox")
    match app-id=r#"google-chrome$"# title="^Picture-in-Picture$"
    open-floating true
}

// Example: block out two password managers from screen capture.
// (This example rule is commented out with a "/-" in front.)
/-window-rule {
    match app-id=r#"^org\.keepassxc\.KeePassXC$"#
    match app-id=r#"^org\.gnome\.World\.Secrets$"#

    block-out-from "screen-capture"

    // Use this instead if you want them visible on third-party screenshot tools.
    // block-out-from "screencast"
}

// Set open-maximized to true for all windows.
window-rule {
    open-maximized true
}

// Then, for Alacritty ONLY, set open-maximized back to false.
window-rule {
    // This now matches the app-id that is *exactly* "Alacritty"
    match app-id=r#"^Alacritty$"#
    default-column-width { proportion 0.7; }
    open-maximized false
}

// Indicate screencasted windows with red colors.
window-rule {
    match is-window-cast-target=true

    focus-ring {
        active-color "#f38ba8"
        inactive-color "#7d0d2d"
    }

    border {
        inactive-color "#7d0d2d"
    }

    shadow {
        color "#7d0d2d70"
    }

    tab-indicator {
        active-color "#f38ba8"
        inactive-color "#7d0d2d"
    }
}

// Example: enable rounded corners for all windows.
// (This example rule is commented out with a "/-" in front.)
window-rule {
    geometry-corner-radius 8
    clip-to-geometry true
}

// This rule will catch a specific type of Alacritty window and make it fullscreen
window-rule {
  // We'll match any window where the instance name is "Alacritty-Fullscreen"
  match app-id="Alacritty-Fullscreen"
  // And we'll tell niri to open it in fullscreen mode automatically
  open-fullscreen true
  // open-maximized true
}


// Put swaybg inside the overview backdrop.
layer-rule {
    match namespace="^wallpaper$"
    place-within-backdrop true
}



binds {
    Ctrl+Alt+Slash { show-hotkey-overlay; }
    Ctrl+Alt+Tab repeat=false { toggle-overview; }
    // Ctrl+Alt+O repeat=false { toggle-overview; }
    // Terminal and Browser
    Ctrl+Alt+Return { spawn-sh "~/.local/bin/smart-alacritty.sh"; }
    Ctrl+Alt+Super+Return { spawn-sh "alacritty --class Alacritty-Fullscreen,alacritty -e tmux"; }
    Ctrl+Alt+Shift+Return { spawn "google-chrome-stable"; }

    // Application Launcher (Rofi)
    Ctrl+Alt+Space {spawn-sh "fuzzel";}

    // Toggle Waybar's visibility (show/hide)
    Alt+Ctrl+Shift+Space { spawn-sh "pkill -SIGUSR1 waybar"; }

    // --- Core Window and WM Management ---

    // Close focused window
    Ctrl+Alt+C { close-window; }

    // Toggle fullscreen for the focused window
    Ctrl+Alt+Shift+F { fullscreen-window; }
    Ctrl+Alt+F { maximize-column; }
    Ctrl+Alt+Super+F { toggle-windowed-fullscreen; }

    Ctrl+Alt+Shift+V { spawn-sh "cliphist list | fuzzel -d  --width=70 | cliphist decode | wl-copy"; }
    // Toggle floating for the focused window
    Ctrl+Alt+V { toggle-window-floating; }
    Ctrl+Alt+Super+V { switch-focus-between-floating-and-tiling; }
    // Ctrl+Alt+Super+V { toggle-column-tabbed-display; }

    // Quit niri (shows a confirmation)
    Ctrl+Alt+Q { quit; }



    // --- Window Focus  ---

    Ctrl+Alt+Left  { focus-column-left; }
    Ctrl+Alt+Down  { focus-window-or-workspace-down; }
    Ctrl+Alt+Up    { focus-window-or-workspace-up; }
    Ctrl+Alt+Right { focus-column-right; }

    // Focus column left/right
    Ctrl+Alt+H { focus-column-left; }
    Ctrl+Alt+N { focus-column-right; } 

    // Focus window up/down (within a column)
    Ctrl+Alt+T { focus-window-or-workspace-up; }   
    Ctrl+Alt+S { focus-window-or-workspace-down; }

    Ctrl+Alt+Super+Left  { focus-monitor-left; }
    Ctrl+Alt+Super+Down  { focus-monitor-down; }
    Ctrl+Alt+Super+Up    { focus-monitor-up; }
    Ctrl+Alt+Super+Right { focus-monitor-right; }
    Ctrl+Alt+Super+H     { focus-monitor-left; }
    Ctrl+Alt+Super+S     { focus-monitor-down; }
    Ctrl+Alt+Super+T     { focus-monitor-up; }
    Ctrl+Alt+Super+N     { focus-monitor-right; }

    // --- Window Movement ) ---

    Ctrl+Alt+Shift+Left  { move-column-left; }
    Ctrl+Alt+Shift+Down  { move-window-down-or-to-workspace-down; }
    Ctrl+Alt+Shift+Up    { move-window-up-or-to-workspace-up; }
    Ctrl+Alt+Shift+Right { move-column-right; }

    // Move column left/right
    Ctrl+Alt+Shift+H { move-column-left; }
    Ctrl+Alt+Shift+N { move-column-right; }

    // Move window up/down (within a column)
    Ctrl+Alt+Shift+T { move-window-up-or-to-workspace-up; }
    Ctrl+Alt+Shift+S { move-window-down-or-to-workspace-down; }

    // Move the entire focused column to the monitor
    Ctrl+Alt+Shift+D  { move-column-to-monitor-left; }
    Ctrl+Alt+Shift+W { move-column-to-monitor-right; }


    // Focus specific workspace by number
    Ctrl+Alt+1 { focus-workspace 1; }
    Ctrl+Alt+2 { focus-workspace 2; }
    Ctrl+Alt+3 { focus-workspace 3; }
    Ctrl+Alt+4 { focus-workspace 4; }
    Ctrl+Alt+5 { focus-workspace 5; }
    Ctrl+Alt+6 { focus-workspace 6; }
    Ctrl+Alt+7 { focus-workspace 7; }
    Ctrl+Alt+8 { focus-workspace 8; }
    Ctrl+Alt+9 { focus-workspace 9; }

    // Move focused column to specific workspace by number
    Ctrl+Alt+Shift+1 { move-column-to-workspace 1; }
    Ctrl+Alt+Shift+2 { move-column-to-workspace 2; }
    Ctrl+Alt+Shift+3 { move-column-to-workspace 3; }
    Ctrl+Alt+Shift+4 { move-column-to-workspace 4; }
    Ctrl+Alt+Shift+5 { move-column-to-workspace 5; }
    Ctrl+Alt+Shift+6 { move-column-to-workspace 6; }
    Ctrl+Alt+Shift+7 { move-column-to-workspace 7; }
    Ctrl+Alt+Shift+8 { move-column-to-workspace 8; }
    Ctrl+Alt+Shift+9 { move-column-to-workspace 9; }

    // Use mouse wheel to switch workspaces
    Ctrl+Alt+WheelScrollUp   cooldown-ms=150 { focus-workspace-up; }
    Ctrl+Alt+WheelScrollDown cooldown-ms=150 { focus-workspace-down; }
    Ctrl+Alt+Shift+WheelScrollDown cooldown-ms=150 { move-column-to-workspace-down; }
    Ctrl+Alt+Shift+WheelScrollUp   cooldown-ms=150 { move-column-to-workspace-up; }

    Ctrl+Alt+WheelScrollRight      { focus-column-right; }
    Ctrl+Alt+WheelScrollLeft       { focus-column-left; }
    Ctrl+Alt+Shift+WheelScrollRight { move-column-right; }
    Ctrl+Alt+Shift+WheelScrollLeft  { move-column-left; }


    Ctrl+Alt+Home { focus-column-first; }
    Ctrl+Alt+End  { focus-column-last; }
    Ctrl+Alt+Shift+Home { move-column-to-first; }
    Ctrl+Alt+Shift+End  { move-column-to-last; }

    Ctrl+Alt+Shift+Tab { focus-workspace-previous; }


    Ctrl+Alt+R { switch-preset-column-width; }
    Ctrl+Alt+Shift+R { switch-preset-window-height; }
    Ctrl+Alt+Super+R { reset-window-height; }
    Ctrl+Alt+Z { center-column; }
    // Center all fully visible columns on screen.
    Ctrl+Alt+Shift+Z { center-visible-columns; }

    // The following binds move the focused window in and out of a column.
    // If the window is alone, they will consume it into the nearby column to the side.
    // If the window is already in a column, they will expel it out.
    Ctrl+Alt+BracketLeft  { consume-or-expel-window-left; }
    Ctrl+Alt+BracketRight { consume-or-expel-window-right; }

    // Consume one window from the right to the bottom of the focused column.
    Ctrl+Alt+Period { consume-window-into-column; }
    // Expel the bottom window from the focused column to the right.
    Ctrl+Alt+Semicolon { expel-window-from-column; }

    Ctrl+Alt+Minus { set-column-width "-10%"; }
    Ctrl+Alt+Equal { set-column-width "+10%"; }
    Ctrl+Alt+Shift+Minus { set-window-height "-10%"; }
    Ctrl+Alt+Shift+Equal { set-window-height "+10%"; }


    // --- Screenshotting (using niri's built-in tools) ---

    // Niri has better, Wayland-native screenshot tools.
    // These replace your maim/flameshot binds.
    Print  { screenshot-window; }  // Capture the focused window
    Ctrl+Alt+Print { screenshot-screen; }  // Capture the whole screen
    Ctrl+Alt+SHIFT+Print    { screenshot; }          // Capture a region


    // --- Media and Hardware Keys (Modern equivalents from default config) ---

    // Screen Locker
    Ctrl+Alt+L { spawn "hyprlock"; }

    Ctrl+Alt+E { quit; }
    Ctrl+Alt+Delete { quit; }


    Ctrl+Up  allow-when-locked=true { spawn-sh "wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%+"; }
    Ctrl+Down  allow-when-locked=true { spawn-sh "wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%-"; }

    // Volume keys (using PipeWire & WirePlumber)
    XF86AudioRaiseVolume  allow-when-locked=true { spawn-sh "wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%+"; }
    XF86AudioLowerVolume  allow-when-locked=true { spawn-sh "wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%-"; }
    XF86AudioMute         allow-when-locked=true { spawn-sh "wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle"; }
    XF86AudioMicMute      allow-when-locked=true { spawn-sh "wpctl set-mute @DEFAULT_AUDIO_SOURCE@ toggle"; }

    // Brightness keys (using brightnessctl)
    XF86MonBrightnessUp   allow-when-locked=true { spawn "brightnessctl" "set" "+10%"; }
    XF86MonBrightnessDown allow-when-locked=true { spawn "brightnessctl" "set" "10%-"; }

}
